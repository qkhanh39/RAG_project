"""
File ch√≠nh ƒë·ªÉ ch·∫°y ·ª©ng d·ª•ng Chatbot AI
Ch·ª©c nƒÉng: 
- T·∫°o giao di·ªán web v·ªõi Streamlit
- X·ª≠ l√Ω t∆∞∆°ng t√°c chat v·ªõi ng∆∞·ªùi d√πng
- K·∫øt n·ªëi v·ªõi AI model ƒë·ªÉ tr·∫£ l·ªùi
"""

# === IMPORT C√ÅC TH∆Ø VI·ªÜN C·∫¶N THI·∫æT ===
import streamlit as st  # Th∆∞ vi·ªán t·∫°o giao di·ªán web
from dotenv import load_dotenv  # ƒê·ªçc file .env ch·ª©a API key
from seed_data import seed_milvus  # H√†m x·ª≠ l√Ω d·ªØ li·ªáu
from langchain_community.callbacks.streamlit import StreamlitCallbackHandler
from langchain_community.chat_message_histories import StreamlitChatMessageHistory
from local_ollama import initialize_chain

# === THI·∫æT L·∫¨P GIAO DI·ªÜN TRANG WEB ===
def setup_page():
    """
    C·∫•u h√¨nh trang web c∆° b·∫£n
    """
    st.set_page_config(
        page_title="AI Assistant",  # Ti√™u ƒë·ªÅ tab tr√¨nh duy·ªát
        page_icon="üí¨",  # Icon tab
        layout="wide"  # Giao di·ªán r·ªông
    )

# === KH·ªûI T·∫†O ·ª®NG D·ª§NG ===
def initialize_app():
    """
    Kh·ªüi t·∫°o c√°c c√†i ƒë·∫∑t c·∫ßn thi·∫øt:
    - ƒê·ªçc file .env ch·ª©a API key
    - C·∫•u h√¨nh trang web
    """
    load_dotenv()  # ƒê·ªçc API key t·ª´ file .env
    setup_page()  # Thi·∫øt l·∫≠p giao di·ªán

# === THANH C√îNG C·ª§ B√äN TR√ÅI ===
def setup_sidebar():
    """
    T·∫°o thanh c√¥ng c·ª• b√™n tr√°i v·ªõi c√°c t√πy ch·ªçn:
    1. Ch·ªçn ngu·ªìn d·ªØ li·ªáu (File ho·∫∑c URL)
    2. Nh·∫≠p th√¥ng tin file/URL
    3. N√∫t t·∫£i/crawl d·ªØ li·ªáu
    """
    with st.sidebar:
        st.title("‚öôÔ∏è C·∫•u h√¨nh")
        
        # Ch·ªçn ngu·ªìn d·ªØ li·ªáu
        data_source = st.radio(
            "Ch·ªçn ngu·ªìn d·ªØ li·ªáu:",
            ["File Local"]
        )
        
        # X·ª≠ l√Ω t√πy theo l·ª±a ch·ªçn
        if data_source == "File Local":
            handle_local_file()

def handle_local_file():
    """
    X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn t·∫£i file:
    1. Nh·∫≠p t√™n file v√† th∆∞ m·ª•c
    2. T·∫£i d·ªØ li·ªáu khi nh·∫•n n√∫t
    """
    filename = st.text_input("T√™n file JSON:", "stack.json")
    directory = st.text_input("Th∆∞ m·ª•c ch·ª©a file:", "data")
    
    if st.button("T·∫£i d·ªØ li·ªáu t·ª´ file"):
        with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu..."):
            seed_milvus('http://localhost:19530', 'data_test', filename, directory)
        st.success("ƒê√£ t·∫£i d·ªØ li·ªáu th√†nh c√¥ng!")

# === GIAO DI·ªÜN CHAT CH√çNH ===
def setup_chat_interface():
    """
    T·∫°o giao di·ªán chat ch√≠nh:
    1. Hi·ªÉn th·ªã ti√™u ƒë·ªÅ
    2. Kh·ªüi t·∫°o l·ªãch s·ª≠ chat
    3. Hi·ªÉn th·ªã c√°c tin nh·∫Øn
    """
    st.title("üí¨ AI Assistant")
    st.caption("üöÄ Tr·ª£ l√Ω AI ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi LangChain v√† OpenAI")

    # Kh·ªüi t·∫°o b·ªô nh·ªõ chat
    msgs = StreamlitChatMessageHistory(key="langchain_messages")
    
    # T·∫°o tin nh·∫Øn ch√†o m·ª´ng n·∫øu l√† chat m·ªõi
    if "messages" not in st.session_state:
        st.session_state.messages = [
            {"role": "assistant", "content": "T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?"}
        ]
        msgs.add_ai_message("T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?")

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
    for msg in st.session_state.messages:
        role = "assistant" if msg["role"] == "assistant" else "human"
        st.chat_message(role).write(msg["content"])

    return msgs

# === X·ª¨ L√ù TIN NH·∫ÆN NG∆Ø·ªúI D√ôNG ===
def handle_user_input(msgs, llm_chain):
    """
    X·ª≠ l√Ω khi ng∆∞·ªùi d√πng g·ª≠i tin nh·∫Øn:
    1. Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
    2. G·ªçi AI x·ª≠ l√Ω v√† tr·∫£ l·ªùi
    3. L∆∞u v√†o l·ªãch s·ª≠ chat
    """
    if prompt := st.chat_input("H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ Stack AI!"):
        # L∆∞u v√† hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
        st.session_state.messages.append({"role": "human", "content": prompt})
        st.chat_message("human").write(prompt)
        msgs.add_user_message(prompt)

        # X·ª≠ l√Ω v√† hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi
        with st.chat_message("assistant"):
            st_callback = StreamlitCallbackHandler(st.container())
            
            # L·∫•y l·ªãch s·ª≠ chat
            chat_history = [
                {"role": msg["role"], "content": msg["content"]}
                for msg in st.session_state.messages[:-1]
            ]
            
            # G·ªçi AI x·ª≠ l√Ω
            response = llm_chain.invoke(
                {
                    "query": prompt,
                    "chat_history": chat_history
                },
                {"callbacks": [st_callback]}
            )
            # L∆∞u v√† hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi
            output = response["result"]
            st.session_state.messages.append({"role": "assistant", "content": output})
            msgs.add_ai_message(output)
            st.write(output)

# === H√ÄM CH√çNH ===
def main():
    """
    H√†m ch√≠nh ƒëi·ªÅu khi·ªÉn lu·ªìng ch∆∞∆°ng tr√¨nh:
    1. Kh·ªüi t·∫°o ·ª©ng d·ª•ng
    2. T·∫°o giao di·ªán
    3. X·ª≠ l√Ω t∆∞∆°ng t√°c ng∆∞·ªùi d√πng
    """
    initialize_app()
    setup_sidebar()
    msgs = setup_chat_interface()
    
    # Kh·ªüi t·∫°o AI
    
    llm_chain = initialize_chain()
    # X·ª≠ l√Ω chat
    handle_user_input(msgs, llm_chain)



# retriever = get_retriever()
# agent_executor = get_llm_and_agent(retriever)
# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    main() 